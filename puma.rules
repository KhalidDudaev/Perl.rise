{
  "\""                         => "\\\"",
  "_abstract"                  => "(?<abstract>\\babstract\\b)(?<sps1>\\s*)(?<name>\\b(?:[^\\d\\W]\\w*(?:(?:::)[^\\d\\W]\\w*)*)\\b)(?<sps2>\\s*)(?:(?<content>.*?))?(?<sps3>\\s*)(?<block_brace>(?<BLOCK_BRACE>\\{(?>[^\\{\\}]+|(?&BLOCK_BRACE))*\\}))",
  "_abstract_"                 => "_abstract_",
  "_auth"                      => "(?<auth>\\bauth\\b)(?<sps1>\\s*)(?<name>\\b(?:[^\\d\\W]\\w*(?:(?:::)[^\\d\\W]\\w*)*)\\b)",
  "_base_"                     => "_base_",
  "_class"                     => "(?:(?<accessmod_class>\\bprivate\\b|\\bprotected\\b|\\bpublic\\b))?(?<sps1>\\s*)(?<class>\\bclass\\b)(?<sps2>\\s*)(?<name>\\b(?:[^\\d\\W]\\w*(?:(?:::)[^\\d\\W]\\w*)*)\\b)(?<sps3>\\s*)(?:(?<content>.*?))?(?<sps4>\\s*)(?<block_brace>(?<BLOCK_BRACE>\\{(?>[^\\{\\}]+|(?&BLOCK_BRACE))*\\}))",
  "_class_"                    => "_class_",
  "_class_ops"                 => "(?<new>\\bnew\\b)(?<sps1>\\s*)(?<name>\\b(?:[^\\d\\W]\\w*(?:(?:::)[^\\d\\W]\\w*)*)\\b)",
  "_class_type_"               => "_namespace_|_base_|_class_|_abstract_|_interface_",
  "_comma_quarter"             => "(?<name_ops>\\bnamespace\\b|\\bclass\\b|\\babstract\\b|\\binterface\\b|\\bfunction\\b|\\bthread\\b|\\bvar\\b|\\bconst\\b|\\busing\\b|\\bextends\\b|\\bimplements\\b|\\bnew\\b)(?<sps1>\\s*)(?<name_dot_list>\\b(?:[^\\d\\W]\\w*(?:(?:\\.)[^\\d\\W]\\w*)*)\\b(?:\\s*\\,\\s*\\b(?:[^\\d\\W]\\w*(?:(?:\\.)[^\\d\\W]\\w*)*)\\b)*)",
  "_commentC"                  => "(?<comment_C>(?<![msqr\\\$\\\@\\%\\\\])\\/\\/ [^\\r\\n]*)",
  "_concat"                    => "(?<concat>(?<![!=])\\~)",
  "_const_"                    => "_const_",
  "_constant_compile"          => "(?:(?<accessmod>\\blocal\\b|\\bexport\\b(?:\\s*:\\w+)*|\\bprivate\\b|\\bprotected\\b|\\bpublic\\b))?(?<sps1>\\s*)(const)(?<sps2>\\s*)(?<name>\\b(?:[^\\d\\W]\\w*(?:(?:::)[^\\d\\W]\\w*)*)\\b)(?<sps3>\\s*)=(?<sps4>\\s*)(?<content>.*?)(?<sps5>\\s*)(?<op_end>\\;)",
  "_excluding"                 => "(?<excluding>(?:^=(?:head[1-4]|item).*?(?:\\n=cut.*(?:\\n\\n|\\Z))|^=pod.*?(?:\\n=cut.*(?:\\n\\n|\\Z))|^=\\bfor\\b.*?(?:\\n=cut.*(?:\\n\\n|\\Z))|^=begin.*?(?:\\n=cut.*(?:\\n\\n|\\Z)))|(?:^__DATA__\\r?\\n.*)|(?:^__END__\\r?\\n.*)|(?<![\$\@%])\\# [^\\r\\n]*|(?<REGEX_REPLACE>\\bs\\b)\\s*(?:REGEXNOMATH\n\t\t|(?:\\(\\)|\\((?(?<!\\\\)[^\\(\\)]|.)*?(?<!\\\\)\\)) \\s* (?:\\(\\)|\\((?(?<!\\\\)[^\\(\\)]|.)*?(?<!\\\\)\\))\n\t\t|(?:\\{\\}|\\{(?(?<!\\\\)[^\\{\\}]|.)*?(?<!\\\\)\\}) \\s* (?:\\{\\}|\\{(?(?<!\\\\)[^\\{\\}]|.)*?(?<!\\\\)\\})\n\t\t|(?:\\[\\]|\\[(?(?<!\\\\)[^\\[\\]]|.)*?(?<!\\\\)\\]) \\s* (?:\\[\\]|\\[(?(?<!\\\\)[^\\[\\]]|.)*?(?<!\\\\)\\])\n\t\t|(?:\\<\\>|\\<(?(?<!\\\\)[^\\<\\>]|.)*?(?<!\\\\)\\>) \\s* (?:\\<\\>|\\<(?(?<!\\\\)[^\\<\\>]|.)*?(?<!\\\\)\\>)\n\t\t|(?:///|/(?:(?(?<!\\\\)[^/]|.)*?[^\\\\]/){2})\n\t)|(?<REGEX_MATH>\\bm\\b)\\s*(?:REGEXNOMATH\n\t\t|(?:\\(\\)|\\((?(?<!\\\\)[^\\(\\)]|.)*?(?<!\\\\)\\))\n\t\t|(?:\\{\\}|\\{(?(?<!\\\\)[^\\{\\}]|.)*?(?<!\\\\)\\})\n\t\t|(?:\\[\\]|\\[(?(?<!\\\\)[^\\[\\]]|.)*?(?<!\\\\)\\])\n\t\t|(?:\\<\\>|\\<(?(?<!\\\\)[^\\<\\>]|.)*?(?<!\\\\)\\>)\n\t\t|(?://|/(?(?<!\\\\)[^/]|.)*?(?<!\\\\)/)\n\t)|(?:\\bq[qwr]?\\b\\s*(?:NOMATH\n        |(?:\\(\\)|\\((?(?<!\\\\)[^\\(\\)]|.)*?(?<!\\\\)\\))\n        |(?:\\{\\}|\\{(?(?<!\\\\)[^\\{\\}]|.)*?(?<!\\\\)\\})\n        |(?:\\[\\]|\\[(?(?<!\\\\)[^\\[\\]]|.)*?(?<!\\\\)\\])\n        |(?:\\<\\>|\\<(?(?<!\\\\)[^\\<\\>]|.)*?(?<!\\\\)\\>)\n        |(?://|/(?(?<!\\\\)[^/]|.)*?(?<!\\\\)/)\n        |(?:\\'\\'|\\'(?(?<!\\\\)[^\\']|.)*?[^\\\\]\\')\n        |(?:\\\"\\\"|\\\"(?(?<!\\\\)[^\\\"]|.)*?[^\\\\]\\\")\n        |(?:\\`\\`|\\`(?(?<!\\\\)[^\\`]|.)*?[^\\\\]\\`)\n        |(?:(?<qchar>[\\W\\w]).*?(?!\\\\(?&qchar))(?&qchar))\n    )|(?:\\'\\'|\\'(?(?<!\\\\)[^\\']|.)*?[^\\\\]\\')|(?:\\\"\\\"|\\\"(?(?<!\\\\)[^\\\"]|.)*?[^\\\\]\\\")))",
  "_for"                       => "(?<for_each>\\b(?:\\bforeach\\b|\\bfor\\b)\\b)(?<sps1>\\s*)\\((?<sps2>\\s*)(?:(?<variable>\\bvar\\b))?(?<sps3>\\s*)(?<name>\\b(?:[^\\d\\W]\\w*(?:(?:::)[^\\d\\W]\\w*)*)\\b)(?<sps4>\\s*)\\=(?<condition>.*?)(?<sps5>\\s*)\\)(?<sps6>\\s*)(?:(?<block_brace>(?<BLOCK_BRACE>\\{(?>[^\\{\\}]+|(?&BLOCK_BRACE))*\\})))?",
  "_for_foreach_array"         => "(?<op_for_each>__ (?:FOR|FOREACH) __)(?<sps1>\\s*)\\((?<sps2>\\s*)(?<ret_arr_ops>\\b(?:map|grep|reverse|sort|keys|values|each)\\b)",
  "_foreach"                   => "(?<for_each>\\b(?:\\bforeach\\b|\\bfor\\b)\\b)(?<sps1>\\s*)(?<block_paren>(?<BLOCK_PAREN>\\((?>[^\\(\\)]+|(?&BLOCK_PAREN))*\\)))(?<sps2>\\s*)(?:(?<block_brace>(?<BLOCK_BRACE>\\{(?>[^\\{\\}]+|(?&BLOCK_BRACE))*\\})))?",
  "_foreach_arr"               => "(?<op_for_each>__ (?:FOR|FOREACH) __)(?<sps1>\\s*)(?<block_paren>(?<BLOCK_PAREN>\\((?>[^\\(\\)]+|(?&BLOCK_PAREN))*\\)))(?<sps2>\\s*)(?:(?<block_brace>(?<BLOCK_BRACE>\\{(?>[^\\{\\}]+|(?&BLOCK_BRACE))*\\})))?",
  "_foreach_var"               => "(?<for_each>\\b(?:\\bforeach\\b|\\bfor\\b)\\b)(?<sps1>\\s*)(?:(?<variable>\\bvar\\b))?(?<sps2>\\s*)(?<name>\\b(?:[^\\d\\W]\\w*(?:(?:::)[^\\d\\W]\\w*)*)\\b)(?<sps3>\\s*)(?<block_paren>(?<BLOCK_PAREN>\\((?>[^\\(\\)]+|(?&BLOCK_PAREN))*\\)))(?<sps4>\\s*)(?:(?<block_brace>(?<BLOCK_BRACE>\\{(?>[^\\{\\}]+|(?&BLOCK_BRACE))*\\})))?",
  "_function_call"             => "(?<!\\.)(?<name>\\b(?:[^\\d\\W]\\w*(?:(?:::)[^\\d\\W]\\w*)*)\\b)(?<sps1>\\s*)\\((?!(?<sps2>\\s*)(?:\\\$?\\b__RISE_SELF__\\b|\\b__PACKAGE__\\b))",
  "_function_call_post1"       => "(?:__METHOD__)+",
  "_function_call_post2"       => "(?<self_con>(?:\\\$?\\b__RISE_SELF__\\b|\\b__PACKAGE__\\b))\\,\\)",
  "_function_compile"          => "(?:(?<accessmod>\\blocal\\b|\\bexport\\b(?:\\s*:\\w+)*|\\bprivate\\b|\\bprotected\\b|\\bpublic\\b))?(?<sps1>\\s*)(?:(?<override>\\boverride\\b))?(?<sps2>\\s*)(?<function>\\bfunction\\b)(?<sps3>\\s*)(?:(?<name>\\b(?:[^\\d\\W]\\w*(?:(?:::)[^\\d\\W]\\w*)*)\\b))?(?<sps4>\\s*)(?:(?<code_args>\\(.*?\\)))?(?<sps5>\\s*)(?:(?<code_type>(?:\\:\\s*\\w+\\s*)*))?(?<sps6>\\s*)(?<block_brace>(?<BLOCK_BRACE>\\{(?>[^\\{\\}]+|(?&BLOCK_BRACE))*\\}))",
  "_function_defs"             => "(?:(?<accessmod>\\blocal\\b|\\bexport\\b(?:\\s*:\\w+)*|\\bprivate\\b|\\bprotected\\b|\\bpublic\\b))?(?<sps1>\\s*)(?<function>\\bfunction\\b)(?<sps2>\\s*)(?:(?<args_attr>(?:[^\\{\\}](?!(?<!\\S)(?:\\bnamespace\\b|\\bclass\\b|\\babstract\\b|\\binterface\\b|\\bfunction\\b|\\bthread\\b|\\bvar\\b|\\bconst\\b)(?!\\S)|\\blocal\\b|\\bexport\\b(?:\\s*:\\w+)*|\\bprivate\\b|\\bprotected\\b|\\bpublic\\b))*))?(?<sps3>\\s*)(?<op_end>\\;)(?<nline>\\r|\\n|\\r\\n)",
  "_implements"                => "(?<implements>\\bimplements\\b)(?<sps1>\\s*)(?<name_list>\\b(?:[^\\d\\W]\\w*(?:(?:::)[^\\d\\W]\\w*)*)\\b(?:\\s*\\,\\s*\\b(?:[^\\d\\W]\\w*(?:(?:::)[^\\d\\W]\\w*)*)\\b)*)",
  "_including"                 => "(?<including>%%%TEXT_ \\d+ %%%)",
  "_inherits"                  => "(?<inherits>\\bextends\\b)(?<sps1>\\s*)(?<name>\\b(?:[^\\d\\W]\\w*(?:(?:::)[^\\d\\W]\\w*)*)\\b)",
  "_inject"                    => "(?<inject>\\binject\\b)(?<sps1>\\s*)(?<content>.*?)(?<sps2>\\s*)(?<op_end>\\;)",
  "_interface"                 => "(?<interface>\\binterface\\b)(?<sps1>\\s*)(?<name>\\b(?:[^\\d\\W]\\w*(?:(?:::)[^\\d\\W]\\w*)*)\\b)(?<sps2>\\s*)(?:(?<content>.*?))?(?<sps3>\\s*)(?<block_brace>(?<BLOCK_BRACE>\\{(?>[^\\{\\}]+|(?&BLOCK_BRACE))*\\}))",
  "_interface_"                => "_interface_",
  "_interface_set"             => "(?:(?<accessmod_class>\\bprivate\\b|\\bprotected\\b|\\bpublic\\b))?(?<sps1>\\s*)(?<object_members>\\bfunction\\b|\\bthread\\b|\\bvar\\b|\\bconst\\b)(?<sps2>\\s*)(?<name>\\b(?:[^\\d\\W]\\w*(?:(?:::)[^\\d\\W]\\w*)*)\\b)(?<sps3>\\s*)(?<op_end>\\;)",
  "_namespace"                 => "(?<namespace>\\bnamespace\\b)(?<sps1>\\s*)(?<name>\\b(?:[^\\d\\W]\\w*(?:(?:::)[^\\d\\W]\\w*)*)\\b)(?<sps2>\\s*)(?<block_brace>(?<BLOCK_BRACE>\\{(?>[^\\{\\}]+|(?&BLOCK_BRACE))*\\}))",
  "_namespace_"                => "_namespace_",
  "_nonamedblock"              => "(?<unblk_pref>(?:\\}|\\;|\\%\\%\\%)\\s*)(?<block_brace>(?<BLOCK_BRACE>\\{(?>[^\\{\\}]+|(?&BLOCK_BRACE))*\\}))",
  "_object_"                   => "_class_|_abstract_|_interface_",
  "_object_type_"              => "\\b_object_ \\w+ _\\b",
  "_op_array_block"            => "(?<op_array_block>\\b(?:map|grep|sort)\\b)(?<sps1>\\s*)\\{",
  "_op_array_hash"             => "(?<![\\-\\>\\.])(?<op_array_hash>\\b(?:keys|values|each|map|grep|join|reverse|pop|push|shift|unshift|splice)\\b)",
  "_op_dot"                    => "(?<op_dot2>(?<!\\.)\\.(?![\\d\\.]))",
  "_op_for_each"               => "(?:(?<op_for_each>__ (?:FOR|FOREACH) __)|(?<op_for_each_cond>__ (?:FOR_COND|FOREACH_COND) __))",
  "_op_regex"                  => "(?<spec_name>[\\\@\\\$\\%\\&\\*]?(?:\\bself\\b\\.)*\\b(?:\\w+(?:(?:::)\\w+)*)\\b(?:\\.?\\{[-+]?\\w+\\})*)(?<sps1>\\s*)(?<op_regex>[=!]\\~)(?<sps2>\\s*)REGEX_MATH",
  "_op_scalar"                 => "(?<![\\-\\>\\.])(?<op_scalar>\\b(?:split)\\b)",
  "_op_sort_blockless"         => "(?<op_sort_blockless>\\bsort\\b(?!\\s*\\{))",
  "_optimize4"                 => "\\s+\\;",
  "_optimize5"                 => "(?![\\n\\r])\\s\\s",
  "_optimize6"                 => "_UNNAMEDBLOCK_",
  "_optimize7"                 => "__RISE_R2A(?<sps1>\\s*)__RISE_(?:A)?2R",
  "_optimize71"                => "__RISE_R2A(?<sps1>\\s*)(?:__RISE_R2A(?<sps2>\\s*))+",
  "_optimize8"                 => "REGEX_MATH",
  "_optimize9"                 => "(?<regex_pattern_block>(?<REG_PATTERN_LEFT>%%%REGEXBLOCK\\\")|(?<REG_PATTERN_RIGHT>\\\"REGEXBLOCK%%%))",
  "_regex_match"               => "(?<regex_match>(?:\\bregex\\b|\\bre\\b)\\.(?:\\bm\\b|\\bmatch\\b))(?:(?<sps1>\\s*)\\:(?<regex_mods>\\w+))?(?:(?<sps2>\\s*)(?:(?<sigils>[\\\@\\\$\\%\\&\\*]))?(?<regex_sorce>(?:\\bself\\b\\.)*\\b(?:[^\\d\\W]\\w*(?:(?:::)[^\\d\\W]\\w*)*)\\b(?:\\.?\\{[-+]?\\w+\\})*)(?<sps3>\\s*)(?<comma_long_short>\\=\\>|\\,))?(?<sps4>\\s*)(?:(?<not>\\!))?(?:(?<regex_pattern_txt>%%%TEXT_ \\d+ %%%)|(?<self_name>(?:\\bself\\b\\.)*\\b(?:[^\\d\\W]\\w*(?:(?:::)[^\\d\\W]\\w*)*)\\b(?:\\.?\\{[-+]?\\w+\\})*))",
  "_regex_replace"             => "(?<regex_replace>(?:\\bregex\\b|\\bre\\b)\\.(?:\\bs\\b|\\br\\b|\\breplace\\b))(?:(?<sps1>\\s*)\\:(?<regex_mods>\\w+))?(?:(?<sps2>\\s*)(?:(?<sigils>[\\\@\\\$\\%\\&\\*]))?(?<regex_sorce>(?:\\bself\\b\\.)*\\b(?:[^\\d\\W]\\w*(?:(?:::)[^\\d\\W]\\w*)*)\\b(?:\\.?\\{[-+]?\\w+\\})*)(?<sps3>\\s*)(?<comma_long_short>\\=\\>|\\,))?(?<sps4>\\s*)(?:(?<not>\\!))?(?:(?<regex_pattern_txt>%%%TEXT_ \\d+ %%%)|(?<self_name>(?:\\bself\\b\\.)*\\b(?:[^\\d\\W]\\w*(?:(?:::)[^\\d\\W]\\w*)*)\\b(?:\\.?\\{[-+]?\\w+\\})*))(?<sps5>\\s*)(?<comma_long_short>\\=\\>|\\,)(?<sps6>\\s*)(?:(?<regex_expr_txt>%%%TEXT_ \\d+ %%%)|(?<regex_expr_block>(?<BLOCK_BRACE>\\{(?>[^\\{\\}]+|(?&BLOCK_BRACE))*\\}))|(?<self_name>(?:\\bself\\b\\.)*\\b(?:[^\\d\\W]\\w*(?:(?:::)[^\\d\\W]\\w*)*)\\b(?:\\.?\\{[-+]?\\w+\\})*)(?<sps7>\\s*)(?<code_args>\\(.*?\\)))",
  "_thread_call"               => "(?<!\\.)(?<name>\\b(?:[^\\d\\W]\\w*(?:(?:::)[^\\d\\W]\\w*)*)\\b)(?<sps1>\\s*)\\((?!(?<sps2>\\s*)(?:\\\$?\\b__RISE_SELF__\\b|\\b__PACKAGE__\\b))",
  "_thread_call_post1"         => "(?:__METHOD__)+",
  "_thread_call_post2"         => "(?<self_con>(?:\\\$?\\b__RISE_SELF__\\b|\\b__PACKAGE__\\b))\\,\\)",
  "_thread_compile"            => "(?:(?<accessmod>\\blocal\\b|\\bexport\\b(?:\\s*:\\w+)*|\\bprivate\\b|\\bprotected\\b|\\bpublic\\b))?(?<sps1>\\s*)(?<thread>\\bthread\\b)(?<sps2>\\s*)(?:(?<name>\\b(?:[^\\d\\W]\\w*(?:(?:::)[^\\d\\W]\\w*)*)\\b))?(?<sps3>\\s*)(?:(?<code_args>\\(.*?\\)))?(?<sps4>\\s*)(?:(?<code_attr>(?:\\:\\s*\\w+\\s*)*))?(?<sps5>\\s*)(?<block_brace>(?<BLOCK_BRACE>\\{(?>[^\\{\\}]+|(?&BLOCK_BRACE))*\\}))",
  "_unwrap_code"               => "(?<all>.*)",
  "_unwrap_code_footer"        => "(?<all>.*)",
  "_unwrap_code_header"        => "(?<all>.*)",
  "_unwrap_variable"           => "(?<all>.*)",
  "_using"                     => "(?<using>\\busing\\b)(?<sps1>\\s*)(?<name>\\b(?:[^\\d\\W]\\w*(?:(?:::)[^\\d\\W]\\w*)*)\\b)(?:(?<content>.*?))?(?<op_end>\\;)",
  "_var_"                      => "_var_",
  "_variable_boost"            => "(?<![\\\@\\\$\\%\\&\\*]|\\.|\\:)(?<!sub\\s)(var_all)",
  "_variable_boost_post"       => "__VARBOOSTED__",
  "_variable_call"             => "(?<!\\.)(?<name>\\b(?:[^\\d\\W]\\w*(?:(?:::)[^\\d\\W]\\w*)*)\\b)(?!%)",
  "_variable_compile"          => "(?:(?<accessmod>\\blocal\\b|\\bexport\\b(?:\\s*:\\w+)*|\\bprivate\\b|\\bprotected\\b|\\bpublic\\b))?(?<sps1>\\s*)(?<variable>\\bvar\\b)(?<sps2>\\s*)(?<name>\\b(?:[^\\d\\W]\\w*(?:(?:::)[^\\d\\W]\\w*)*)\\b)(?<sps3>\\s*)(?:(?<member_type>\\:\\s*\\w+(?:\\s*(?<BLOCK_PAREN>\\((?>[^\\(\\)]+|(?&BLOCK_PAREN))*\\)))?))?(?<sps4>\\s*)(?:(?<op_end>\\;))?",
  "_variable_compile_class"    => "(?:(?<accessmod>\\blocal\\b|\\bexport\\b(?:\\s*:\\w+)*|\\bprivate\\b|\\bprotected\\b|\\bpublic\\b))?(?<sps1>\\s*)(?<variable>\\bvar\\b)(?<sps2>\\s*)(?<name>\\b(?:[^\\d\\W]\\w*(?:(?:::)[^\\d\\W]\\w*)*)\\b)(?<sps3>\\s*)(?:(?<member_type>\\:\\s*\\w+(?:\\s*(?<BLOCK_PAREN>\\((?>[^\\(\\)]+|(?&BLOCK_PAREN))*\\)))?))?(?<sps4>\\s*)(?:(?<op_end>\\;))?",
  "_variable_compile_function" => "(?:(?<accessmod>\\blocal\\b|\\bexport\\b(?:\\s*:\\w+)*|\\bprivate\\b|\\bprotected\\b|\\bpublic\\b))?(?<sps1>\\s*)(?<variable>\\bvar\\b)(?<sps2>\\s*)(?<name>\\b(?:[^\\d\\W]\\w*(?:(?:::)[^\\d\\W]\\w*)*)\\b)(?<sps3>\\s*)(?:(?<member_type>\\:\\s*\\w+(?:\\s*(?<BLOCK_PAREN>\\((?>[^\\(\\)]+|(?&BLOCK_PAREN))*\\)))?))?(?<sps4>\\s*)(?:(?<op_end>\\;))?",
  "_variable_list"             => "(?:(?<accessmod>\\blocal\\b|\\bexport\\b(?:\\s*:\\w+)*|\\bprivate\\b|\\bprotected\\b|\\bpublic\\b))?(?<sps1>\\s*)(?<variable>\\bvar\\b)(?<sps2>\\s*)\\((?<sps3>\\s*)(?<name_list_wtype>\\b(\\b(?:[^\\d\\W]\\w*(?:(?:::)[^\\d\\W]\\w*)*)\\b(\\s*:\\s*[^\\d\\W]\\w*)?)\\b(?:\\s*\\,\\s*\\b(\\b(?:[^\\d\\W]\\w*(?:(?:::)[^\\d\\W]\\w*)*)\\b(\\s*:\\s*[^\\d\\W]\\w*)?)\\b)*)(?<sps4>\\s*)\\)(?<sps5>\\s*)(?:(?<op_end>\\;))?",
  "_variable_observe"          => "(?:(?<accessmod>\\blocal\\b|\\bexport\\b(?:\\s*:\\w+)*|\\bprivate\\b|\\bprotected\\b|\\bpublic\\b))?(?<sps1>\\s*)(?<variable>\\bvar\\b)(?<sps2>\\s*)(?<name>\\b(?:[^\\d\\W]\\w*(?:(?:::)[^\\d\\W]\\w*)*)\\b)",
  "_variable_optimize"         => "\\bvar\\b(?<sps1>\\s*)\\\$",
  "_vers"                      => "(?<vers>\\bvers\\b)(?<sps1>\\s*)(?<number>\\d+)",
  "_while"                     => "(?<while>\\bwhile\\b)(?<sps1>\\s*)\\((?<condition>.*?)\\)(?<sps2>\\s*)(?:(?<block_brace>(?<BLOCK_BRACE>\\{(?>[^\\{\\}]+|(?&BLOCK_BRACE))*\\})))?",
  "abstract"                   => "\\babstract\\b",
  "accessmod"                  => "\\blocal\\b|\\bexport\\b(?:\\s*:\\w+)*|\\bprivate\\b|\\bprotected\\b|\\bpublic\\b",
  "accessmod_class"            => "\\bprivate\\b|\\bprotected\\b|\\bpublic\\b",
  "after"                      => ".*\$",
  "all"                        => ".*",
  "args_attr"                  => "(?:[^\\{\\}](?!(?<!\\S)(?:\\bnamespace\\b|\\bclass\\b|\\babstract\\b|\\binterface\\b|\\bfunction\\b|\\bthread\\b|\\bvar\\b|\\bconst\\b)(?!\\S)|\\blocal\\b|\\bexport\\b(?:\\s*:\\w+)*|\\bprivate\\b|\\bprotected\\b|\\bpublic\\b))*",
  "auth"                       => "\\bauth\\b",
  "before"                     => "^.*",
  "block_angle"                => "(?<BLOCK_ANGLE>\\<(?>[^\\<\\>]+|(?&BLOCK_ANGLE))*\\>)",
  "block_brace"                => "(?<BLOCK_BRACE>\\{(?>[^\\{\\}]+|(?&BLOCK_BRACE))*\\})",
  "block_paren"                => "(?<BLOCK_PAREN>\\((?>[^\\(\\)]+|(?&BLOCK_PAREN))*\\))",
  "block_slash"                => "(?<BLOCK_SLASH>/(?>[^/]+|(?&BLOCK_SLASH))*/)",
  "block_square"               => "(?<BLOCK_SQUARE>\\[(?>[^\\[\\]]+|(?&BLOCK_SQUARE))*\\])",
  "class"                      => "\\bclass\\b",
  "class_type"                 => "\\bnamespace\\b|\\bclass\\b|\\babstract\\b|\\binterface\\b",
  "code_args"                  => "\\(.*?\\)",
  "code_attr"                  => "(?:\\:\\s*\\w+\\s*)*",
  "code_type"                  => "(?:\\:\\s*\\w+\\s*)*",
  "comma"                      => "\\,",
  "comma_long_short"           => "\\=\\>|\\,",
  "comment"                    => "(?<![\$\@%])\\# [^\\r\\n]*",
  "comment_C"                  => "(?<![msqr\\\$\\\@\\%\\\\])\\/\\/ [^\\r\\n]*",
  "comment_Perl"               => "(?<![\$\@%])\\# [^\\r\\n]*",
  "concat"                     => "(?<![!=])\\~",
  "condition"                  => ".*?",
  "constant"                   => "\\bconst\\b",
  "content"                    => ".*?",
  "content1"                   => ".*?",
  "content2"                   => ".*?",
  "context"                    => "\\b_\\b",
  "CUT"                        => "(?:\\n=cut.*(?:\\n\\n|\\Z))",
  "DATA"                       => "(?:^__DATA__\\r?\\n.*)",
  "digit"                      => "\\d",
  "ELSE"                       => ".*?",
  "END"                        => "(?:^__END__\\r?\\n.*)",
  "EOP"                        => "(?:\\n\\n|\\Z)",
  "equal"                      => "\\=",
  "excluding"                  => "(?:^=(?:head[1-4]|item).*?(?:\\n=cut.*(?:\\n\\n|\\Z))|^=pod.*?(?:\\n=cut.*(?:\\n\\n|\\Z))|^=\\bfor\\b.*?(?:\\n=cut.*(?:\\n\\n|\\Z))|^=begin.*?(?:\\n=cut.*(?:\\n\\n|\\Z)))|(?:^__DATA__\\r?\\n.*)|(?:^__END__\\r?\\n.*)|(?<![\$\@%])\\# [^\\r\\n]*|(?<REGEX_REPLACE>\\bs\\b)\\s*(?:REGEXNOMATH\n\t\t|(?:\\(\\)|\\((?(?<!\\\\)[^\\(\\)]|.)*?(?<!\\\\)\\)) \\s* (?:\\(\\)|\\((?(?<!\\\\)[^\\(\\)]|.)*?(?<!\\\\)\\))\n\t\t|(?:\\{\\}|\\{(?(?<!\\\\)[^\\{\\}]|.)*?(?<!\\\\)\\}) \\s* (?:\\{\\}|\\{(?(?<!\\\\)[^\\{\\}]|.)*?(?<!\\\\)\\})\n\t\t|(?:\\[\\]|\\[(?(?<!\\\\)[^\\[\\]]|.)*?(?<!\\\\)\\]) \\s* (?:\\[\\]|\\[(?(?<!\\\\)[^\\[\\]]|.)*?(?<!\\\\)\\])\n\t\t|(?:\\<\\>|\\<(?(?<!\\\\)[^\\<\\>]|.)*?(?<!\\\\)\\>) \\s* (?:\\<\\>|\\<(?(?<!\\\\)[^\\<\\>]|.)*?(?<!\\\\)\\>)\n\t\t|(?:///|/(?:(?(?<!\\\\)[^/]|.)*?[^\\\\]/){2})\n\t)|(?<REGEX_MATH>\\bm\\b)\\s*(?:REGEXNOMATH\n\t\t|(?:\\(\\)|\\((?(?<!\\\\)[^\\(\\)]|.)*?(?<!\\\\)\\))\n\t\t|(?:\\{\\}|\\{(?(?<!\\\\)[^\\{\\}]|.)*?(?<!\\\\)\\})\n\t\t|(?:\\[\\]|\\[(?(?<!\\\\)[^\\[\\]]|.)*?(?<!\\\\)\\])\n\t\t|(?:\\<\\>|\\<(?(?<!\\\\)[^\\<\\>]|.)*?(?<!\\\\)\\>)\n\t\t|(?://|/(?(?<!\\\\)[^/]|.)*?(?<!\\\\)/)\n\t)|(?:\\bq[qwr]?\\b\\s*(?:NOMATH\n        |(?:\\(\\)|\\((?(?<!\\\\)[^\\(\\)]|.)*?(?<!\\\\)\\))\n        |(?:\\{\\}|\\{(?(?<!\\\\)[^\\{\\}]|.)*?(?<!\\\\)\\})\n        |(?:\\[\\]|\\[(?(?<!\\\\)[^\\[\\]]|.)*?(?<!\\\\)\\])\n        |(?:\\<\\>|\\<(?(?<!\\\\)[^\\<\\>]|.)*?(?<!\\\\)\\>)\n        |(?://|/(?(?<!\\\\)[^/]|.)*?(?<!\\\\)/)\n        |(?:\\'\\'|\\'(?(?<!\\\\)[^\\']|.)*?[^\\\\]\\')\n        |(?:\\\"\\\"|\\\"(?(?<!\\\\)[^\\\"]|.)*?[^\\\\]\\\")\n        |(?:\\`\\`|\\`(?(?<!\\\\)[^\\`]|.)*?[^\\\\]\\`)\n        |(?:(?<qchar>[\\W\\w]).*?(?!\\\\(?&qchar))(?&qchar))\n    )|(?:\\'\\'|\\'(?(?<!\\\\)[^\\']|.)*?[^\\\\]\\')|(?:\\\"\\\"|\\\"(?(?<!\\\\)[^\\\"]|.)*?[^\\\\]\\\"))",
  "export"                     => "\\bexport\\b",
  "fmethod"                    => "\\bfmethod\\b",
  "for"                        => "\\bfor\\b",
  "for_each"                   => "\\b(?:\\bforeach\\b|\\bfor\\b)\\b",
  "foreach"                    => "\\bforeach\\b",
  "func_args"                  => "\\b(\\b(?:[^\\d\\W]\\w*(?:(?:::)[^\\d\\W]\\w*)*)\\b(\\s*:\\s*[^\\d\\W]\\w*)?)\\b(\\s*\\=\\s*.*?)?(?:\\s*\\,\\s*\\b(\\b(?:[^\\d\\W]\\w*(?:(?:::)[^\\d\\W]\\w*)*)\\b(\\s*:\\s*[^\\d\\W]\\w*)?)\\b(\\s*\\=\\s*.*?)?)*",
  "function"                   => "\\bfunction\\b",
  "function1"                  => "\\bfunction\\b",
  "function2"                  => "\\bfunc\\b",
  "ident"                      => "[^\\d\\W]\\w*",
  "implement_list"             => "\\bimplements\\b",
  "implements"                 => "\\bimplements\\b",
  "in_angle"                   => "(?:\\<\\>|\\<(?(?<!\\\\)[^\\<\\>]|.)*?(?<!\\\\)\\>)",
  "in_brace"                   => "(?:\\{\\}|\\{(?(?<!\\\\)[^\\{\\}]|.)*?(?<!\\\\)\\})",
  "in_char"                    => "(?:(?<qchar>[\\W\\w]).*?(?!\\\\(?&qchar))(?&qchar))",
  "in_paren"                   => "(?:\\(\\)|\\((?(?<!\\\\)[^\\(\\)]|.)*?(?<!\\\\)\\))",
  "in_slash"                   => "(?://|/(?(?<!\\\\)[^/]|.)*?(?<!\\\\)/)",
  "in_slash_regex"             => "(?:///|/(?:(?(?<!\\\\)[^/]|.)*?[^\\\\]/){2})",
  "in_slash_regex2"            => "(?^sx: (?:/.*?/(?<!\\\\/).*?/(?<!\\\\/)) )",
  "in_slash_regex3"            => "(?^sx: (?:/.*?(?!\\\\/)/.*?(?!\\\\/)/) )",
  "in_slash_regex4"            => "(?^sx: (?:/.*?[^\\\\]/.*?[^\\\\]/) )",
  "in_square"                  => "(?:\\[\\]|\\[(?(?<!\\\\)[^\\[\\]]|.)*?(?<!\\\\)\\])",
  "including"                  => "%%%TEXT_ \\d+ %%%",
  "inherit_list"               => "\\bextends\\b",
  "inherits"                   => "\\bextends\\b",
  "inject"                     => "\\binject\\b",
  "interface"                  => "\\binterface\\b",
  "letter"                     => "\\w",
  "list"                       => "\\(.*?\\)",
  "local"                      => "\\blocal\\b",
  "member_type"                => "\\:\\s*\\w+(?:\\s*(?<BLOCK_PAREN>\\((?>[^\\(\\)]+|(?&BLOCK_PAREN))*\\)))?",
  "method"                     => "\\bmethod\\b",
  "name"                       => "\\b(?:[^\\d\\W]\\w*(?:(?:::)[^\\d\\W]\\w*)*)\\b",
  "name_dot"                   => "\\b(?:[^\\d\\W]\\w*(?:(?:\\.)[^\\d\\W]\\w*)*)\\b",
  "name_dot_list"              => "\\b(?:[^\\d\\W]\\w*(?:(?:\\.)[^\\d\\W]\\w*)*)\\b(?:\\s*\\,\\s*\\b(?:[^\\d\\W]\\w*(?:(?:\\.)[^\\d\\W]\\w*)*)\\b)*",
  "name_ex"                    => "[^\\d\\W]\\w*(?:(?:::|\\.)[^\\d\\W]\\w*)*",
  "name_ext"                   => "\\b(?:[^\\d\\W]\\w*(?:(?:::)[^\\d\\W]\\w*)*)\\b",
  "name_impl"                  => "\\b(?:[^\\d\\W]\\w*(?:(?:::)[^\\d\\W]\\w*)*)\\b(?:\\s*\\,\\s*\\b(?:[^\\d\\W]\\w*(?:(?:::)[^\\d\\W]\\w*)*)\\b)*",
  "name_list"                  => "\\b(?:[^\\d\\W]\\w*(?:(?:::)[^\\d\\W]\\w*)*)\\b(?:\\s*\\,\\s*\\b(?:[^\\d\\W]\\w*(?:(?:::)[^\\d\\W]\\w*)*)\\b)*",
  "name_list_wtype"            => "\\b(\\b(?:[^\\d\\W]\\w*(?:(?:::)[^\\d\\W]\\w*)*)\\b(\\s*:\\s*[^\\d\\W]\\w*)?)\\b(?:\\s*\\,\\s*\\b(\\b(?:[^\\d\\W]\\w*(?:(?:::)[^\\d\\W]\\w*)*)\\b(\\s*:\\s*[^\\d\\W]\\w*)?)\\b)*",
  "name_ops"                   => "\\bnamespace\\b|\\bclass\\b|\\babstract\\b|\\binterface\\b|\\bfunction\\b|\\bthread\\b|\\bvar\\b|\\bconst\\b|\\busing\\b|\\bextends\\b|\\bimplements\\b|\\bnew\\b",
  "name_type"                  => "\\b(\\b(?:[^\\d\\W]\\w*(?:(?:::)[^\\d\\W]\\w*)*)\\b(\\s*:\\s*[^\\d\\W]\\w*)?)\\b",
  "namespace"                  => "\\bnamespace\\b",
  "namestrong"                 => "[^\\d\\W][\\w:]+[^\\W]",
  "new"                        => "\\bnew\\b",
  "nletter"                    => "\\W",
  "nline"                      => "\\r|\\n|\\r\\n",
  "nnline"                     => "[^\\r\\n]",
  "not"                        => "\\!",
  "number"                     => "\\d+",
  "object"                     => "(?<!\\S)(?:\\bnamespace\\b|\\bclass\\b|\\babstract\\b|\\binterface\\b|\\bfunction\\b|\\bthread\\b|\\bvar\\b|\\bconst\\b)(?!\\S)",
  "object_members"             => "\\bfunction\\b|\\bthread\\b|\\bvar\\b|\\bconst\\b",
  "op_arr2arr_sort"            => "\\b(?:sort)\\b",
  "op_arr2scl"                 => "\\b(?:join|push|unshift)\\b",
  "op_array"                   => "\\b(?:map|grep|join|reverse|sort|pop|push|shift|unshift|size|slice)\\b",
  "op_array2"                  => "\\b(?:pop|shift|slice|unshift|sort)\\b",
  "op_array3"                  => "\\b(?:join)\\b",
  "op_array_block"             => "\\b(?:map|grep|sort)\\b",
  "op_array_hash"              => "\\b(?:keys|values|each|map|grep|join|reverse|pop|push|shift|unshift|splice)\\b",
  "op_dot"                     => "\\.",
  "op_dot2"                    => "(?<!\\.)\\.(?![\\d\\.])",
  "op_end"                     => "\\;",
  "op_for_each"                => "__ (?:FOR|FOREACH) __",
  "op_for_each_cond"           => "__ (?:FOR_COND|FOREACH_COND) __",
  "op_hash"                    => "\\b(?:keys|values|each)\\b",
  "op_regex"                   => "[=!]\\~",
  "op_regex_all"               => "[=!]\\~\\s*[ms]",
  "op_regex_m"                 => "[=!]\\~\\s*m",
  "op_regex_s"                 => "[=!]\\~\\s*s",
  "op_reverse"                 => "\\b(?:reverse)\\b",
  "op_scalar"                  => "\\b(?:split)\\b",
  "op_sort_blockless"          => "\\bsort\\b(?!\\s*\\{)",
  "override"                   => "\\boverride\\b",
  "paren_L"                    => "\\(",
  "paren_R"                    => "\\)",
  "POD"                        => "(?:^=(?:head[1-4]|item).*?(?:\\n=cut.*(?:\\n\\n|\\Z))|^=pod.*?(?:\\n=cut.*(?:\\n\\n|\\Z))|^=\\bfor\\b.*?(?:\\n=cut.*(?:\\n\\n|\\Z))|^=begin.*?(?:\\n=cut.*(?:\\n\\n|\\Z)))",
  "private"                    => "\\bprivate\\b",
  "protected"                  => "\\bprotected\\b",
  "public"                     => "\\bpublic\\b",
  "qquote"                     => "\\bq[qwr]?\\b",
  "qregex_m"                   => "(?<REGEX_MATH>\\bm\\b)\\s*(?:REGEXNOMATH\n\t\t|(?:\\(\\)|\\((?(?<!\\\\)[^\\(\\)]|.)*?(?<!\\\\)\\))\n\t\t|(?:\\{\\}|\\{(?(?<!\\\\)[^\\{\\}]|.)*?(?<!\\\\)\\})\n\t\t|(?:\\[\\]|\\[(?(?<!\\\\)[^\\[\\]]|.)*?(?<!\\\\)\\])\n\t\t|(?:\\<\\>|\\<(?(?<!\\\\)[^\\<\\>]|.)*?(?<!\\\\)\\>)\n\t\t|(?://|/(?(?<!\\\\)[^/]|.)*?(?<!\\\\)/)\n\t)",
  "qregex_s"                   => "(?<REGEX_REPLACE>\\bs\\b)\\s*(?:REGEXNOMATH\n\t\t|(?:\\(\\)|\\((?(?<!\\\\)[^\\(\\)]|.)*?(?<!\\\\)\\)) \\s* (?:\\(\\)|\\((?(?<!\\\\)[^\\(\\)]|.)*?(?<!\\\\)\\))\n\t\t|(?:\\{\\}|\\{(?(?<!\\\\)[^\\{\\}]|.)*?(?<!\\\\)\\}) \\s* (?:\\{\\}|\\{(?(?<!\\\\)[^\\{\\}]|.)*?(?<!\\\\)\\})\n\t\t|(?:\\[\\]|\\[(?(?<!\\\\)[^\\[\\]]|.)*?(?<!\\\\)\\]) \\s* (?:\\[\\]|\\[(?(?<!\\\\)[^\\[\\]]|.)*?(?<!\\\\)\\])\n\t\t|(?:\\<\\>|\\<(?(?<!\\\\)[^\\<\\>]|.)*?(?<!\\\\)\\>) \\s* (?:\\<\\>|\\<(?(?<!\\\\)[^\\<\\>]|.)*?(?<!\\\\)\\>)\n\t\t|(?:///|/(?:(?(?<!\\\\)[^/]|.)*?[^\\\\]/){2})\n\t)",
  "qtext"                      => "\\bq[qwr]?\\b\\s*(?:NOMATH\n        |(?:\\(\\)|\\((?(?<!\\\\)[^\\(\\)]|.)*?(?<!\\\\)\\))\n        |(?:\\{\\}|\\{(?(?<!\\\\)[^\\{\\}]|.)*?(?<!\\\\)\\})\n        |(?:\\[\\]|\\[(?(?<!\\\\)[^\\[\\]]|.)*?(?<!\\\\)\\])\n        |(?:\\<\\>|\\<(?(?<!\\\\)[^\\<\\>]|.)*?(?<!\\\\)\\>)\n        |(?://|/(?(?<!\\\\)[^/]|.)*?(?<!\\\\)/)\n        |(?:\\'\\'|\\'(?(?<!\\\\)[^\\']|.)*?[^\\\\]\\')\n        |(?:\\\"\\\"|\\\"(?(?<!\\\\)[^\\\"]|.)*?[^\\\\]\\\")\n        |(?:\\`\\`|\\`(?(?<!\\\\)[^\\`]|.)*?[^\\\\]\\`)\n        |(?:(?<qchar>[\\W\\w]).*?(?!\\\\(?&qchar))(?&qchar))\n    )",
  "qtext_angle"                => "(?:q[qwr]?\\s*\\<.*?[^\\\\>]\\>)",
  "qtext_brace"                => "(?:q[qwr]?\\s*\\{.*?[^\\\\}]\\})",
  "qtext_char"                 => "(?:q[qwr]?\\s*(?<qchar>[\\W\\w]).*?(?!\\\\(?&qchar))(?&qchar))",
  "qtext_paren"                => "(?:q[qwr]?\\s*\\(.*?[^\\\\)]\\))",
  "qtext_slash"                => "(?:q[qwr]?\\s*/.*?[^\\/]/)",
  "qtext_square"               => "(?:q[qwr]?\\s*\\[.*?[^\\\\]]\\])",
  "qvar"                       => "\\bq[qwr]?\\b",
  "re_match1"                  => "re\\.m",
  "re_match2"                  => "re\\.match",
  "re_match3"                  => "(?<REGEX_REPLACE>\\bs\\b)\\s*(?:REGEXNOMATH\n\t\t|(?:\\(\\)|\\((?(?<!\\\\)[^\\(\\)]|.)*?(?<!\\\\)\\)) \\s* (?:\\(\\)|\\((?(?<!\\\\)[^\\(\\)]|.)*?(?<!\\\\)\\))\n\t\t|(?:\\{\\}|\\{(?(?<!\\\\)[^\\{\\}]|.)*?(?<!\\\\)\\}) \\s* (?:\\{\\}|\\{(?(?<!\\\\)[^\\{\\}]|.)*?(?<!\\\\)\\})\n\t\t|(?:\\[\\]|\\[(?(?<!\\\\)[^\\[\\]]|.)*?(?<!\\\\)\\]) \\s* (?:\\[\\]|\\[(?(?<!\\\\)[^\\[\\]]|.)*?(?<!\\\\)\\])\n\t\t|(?:\\<\\>|\\<(?(?<!\\\\)[^\\<\\>]|.)*?(?<!\\\\)\\>) \\s* (?:\\<\\>|\\<(?(?<!\\\\)[^\\<\\>]|.)*?(?<!\\\\)\\>)\n\t\t|(?:///|/(?:(?(?<!\\\\)[^/]|.)*?[^\\\\]/){2})\n\t)|(?<REGEX_MATH>\\bm\\b)\\s*(?:REGEXNOMATH\n\t\t|(?:\\(\\)|\\((?(?<!\\\\)[^\\(\\)]|.)*?(?<!\\\\)\\))\n\t\t|(?:\\{\\}|\\{(?(?<!\\\\)[^\\{\\}]|.)*?(?<!\\\\)\\})\n\t\t|(?:\\[\\]|\\[(?(?<!\\\\)[^\\[\\]]|.)*?(?<!\\\\)\\])\n\t\t|(?:\\<\\>|\\<(?(?<!\\\\)[^\\<\\>]|.)*?(?<!\\\\)\\>)\n\t\t|(?://|/(?(?<!\\\\)[^/]|.)*?(?<!\\\\)/)\n\t)\\.match",
  "re_repl1"                   => "re\\.[sr]",
  "re_repl2"                   => "re\\.replace",
  "re_repl3"                   => "(?<REGEX_REPLACE>\\bs\\b)\\s*(?:REGEXNOMATH\n\t\t|(?:\\(\\)|\\((?(?<!\\\\)[^\\(\\)]|.)*?(?<!\\\\)\\)) \\s* (?:\\(\\)|\\((?(?<!\\\\)[^\\(\\)]|.)*?(?<!\\\\)\\))\n\t\t|(?:\\{\\}|\\{(?(?<!\\\\)[^\\{\\}]|.)*?(?<!\\\\)\\}) \\s* (?:\\{\\}|\\{(?(?<!\\\\)[^\\{\\}]|.)*?(?<!\\\\)\\})\n\t\t|(?:\\[\\]|\\[(?(?<!\\\\)[^\\[\\]]|.)*?(?<!\\\\)\\]) \\s* (?:\\[\\]|\\[(?(?<!\\\\)[^\\[\\]]|.)*?(?<!\\\\)\\])\n\t\t|(?:\\<\\>|\\<(?(?<!\\\\)[^\\<\\>]|.)*?(?<!\\\\)\\>) \\s* (?:\\<\\>|\\<(?(?<!\\\\)[^\\<\\>]|.)*?(?<!\\\\)\\>)\n\t\t|(?:///|/(?:(?(?<!\\\\)[^/]|.)*?[^\\\\]/){2})\n\t)|(?<REGEX_MATH>\\bm\\b)\\s*(?:REGEXNOMATH\n\t\t|(?:\\(\\)|\\((?(?<!\\\\)[^\\(\\)]|.)*?(?<!\\\\)\\))\n\t\t|(?:\\{\\}|\\{(?(?<!\\\\)[^\\{\\}]|.)*?(?<!\\\\)\\})\n\t\t|(?:\\[\\]|\\[(?(?<!\\\\)[^\\[\\]]|.)*?(?<!\\\\)\\])\n\t\t|(?:\\<\\>|\\<(?(?<!\\\\)[^\\<\\>]|.)*?(?<!\\\\)\\>)\n\t\t|(?://|/(?(?<!\\\\)[^/]|.)*?(?<!\\\\)/)\n\t)\\.replace",
  "regex"                      => "(?<REGEX_REPLACE>\\bs\\b)\\s*(?:REGEXNOMATH\n\t\t|(?:\\(\\)|\\((?(?<!\\\\)[^\\(\\)]|.)*?(?<!\\\\)\\)) \\s* (?:\\(\\)|\\((?(?<!\\\\)[^\\(\\)]|.)*?(?<!\\\\)\\))\n\t\t|(?:\\{\\}|\\{(?(?<!\\\\)[^\\{\\}]|.)*?(?<!\\\\)\\}) \\s* (?:\\{\\}|\\{(?(?<!\\\\)[^\\{\\}]|.)*?(?<!\\\\)\\})\n\t\t|(?:\\[\\]|\\[(?(?<!\\\\)[^\\[\\]]|.)*?(?<!\\\\)\\]) \\s* (?:\\[\\]|\\[(?(?<!\\\\)[^\\[\\]]|.)*?(?<!\\\\)\\])\n\t\t|(?:\\<\\>|\\<(?(?<!\\\\)[^\\<\\>]|.)*?(?<!\\\\)\\>) \\s* (?:\\<\\>|\\<(?(?<!\\\\)[^\\<\\>]|.)*?(?<!\\\\)\\>)\n\t\t|(?:///|/(?:(?(?<!\\\\)[^/]|.)*?[^\\\\]/){2})\n\t)|(?<REGEX_MATH>\\bm\\b)\\s*(?:REGEXNOMATH\n\t\t|(?:\\(\\)|\\((?(?<!\\\\)[^\\(\\)]|.)*?(?<!\\\\)\\))\n\t\t|(?:\\{\\}|\\{(?(?<!\\\\)[^\\{\\}]|.)*?(?<!\\\\)\\})\n\t\t|(?:\\[\\]|\\[(?(?<!\\\\)[^\\[\\]]|.)*?(?<!\\\\)\\])\n\t\t|(?:\\<\\>|\\<(?(?<!\\\\)[^\\<\\>]|.)*?(?<!\\\\)\\>)\n\t\t|(?://|/(?(?<!\\\\)[^/]|.)*?(?<!\\\\)/)\n\t)",
  "regex_expr_block"           => "(?<BLOCK_BRACE>\\{(?>[^\\{\\}]+|(?&BLOCK_BRACE))*\\})",
  "regex_expr_txt"             => "%%%TEXT_ \\d+ %%%",
  "regex_kw"                   => "(?:\\bregex\\b|\\bre\\b)",
  "regex_kw1"                  => "\\bregex\\b",
  "regex_kw2"                  => "\\bre\\b",
  "regex_kw_match"             => "(?:\\bm\\b|\\bmatch\\b)",
  "regex_kw_replace"           => "(?:\\bs\\b|\\br\\b|\\breplace\\b)",
  "regex_m_want"               => "[=}),]",
  "regex_match"                => "(?:\\bregex\\b|\\bre\\b)\\.(?:\\bm\\b|\\bmatch\\b)",
  "regex_match1"               => "\\bm\\b",
  "regex_match2"               => "\\bmatch\\b",
  "regex_mods"                 => "\\w+",
  "regex_pattern_block"        => "(?<REG_PATTERN_LEFT>%%%REGEXBLOCK\\\")|(?<REG_PATTERN_RIGHT>\\\"REGEXBLOCK%%%)",
  "regex_pattern_txt"          => "%%%TEXT_ \\d+ %%%",
  "regex_pattern_var"          => "(?:\\bself\\b\\.)*\\b(?:[^\\d\\W]\\w*(?:(?:::)[^\\d\\W]\\w*)*)\\b(?:\\.?\\{[-+]?\\w+\\})*",
  "regex_replace"              => "(?:\\bregex\\b|\\bre\\b)\\.(?:\\bs\\b|\\br\\b|\\breplace\\b)",
  "regex_replace1"             => "\\bs\\b",
  "regex_replace2"             => "\\br\\b",
  "regex_replace3"             => "\\breplace\\b",
  "regex_sorce"                => "(?:\\bself\\b\\.)*\\b(?:[^\\d\\W]\\w*(?:(?:::)[^\\d\\W]\\w*)*)\\b(?:\\.?\\{[-+]?\\w+\\})*",
  "ret_arr_ops"                => "\\b(?:map|grep|reverse|sort|keys|values|each)\\b",
  "self"                       => "\\bself\\b",
  "self_con"                   => "(?:\\\$?\\b__RISE_SELF__\\b|\\b__PACKAGE__\\b)",
  "self_fn"                    => "\\b__PACKAGE__\\b",
  "self_name"                  => "(?:\\bself\\b\\.)*\\b(?:[^\\d\\W]\\w*(?:(?:::)[^\\d\\W]\\w*)*)\\b(?:\\.?\\{[-+]?\\w+\\})*",
  "self_pkg"                   => "\\b__RISE_SELF__\\b",
  "sigil_S"                    => "\\\$",
  "sigils"                     => "[\\\@\\\$\\%\\&\\*]",
  "space_try"                  => "(?![\\n\\r])\\s\\s",
  "spec_name"                  => "[\\\@\\\$\\%\\&\\*]?(?:\\bself\\b\\.)*\\b(?:\\w+(?:(?:::)\\w+)*)\\b(?:\\.?\\{[-+]?\\w+\\})*",
  "spec_vars"                  => "(?:[\\\@\\\$\\%])(?:\\W|\\^\\w+|\\w+|\\d+|{\\^\\w+})",
  "sps"                        => "\\s*",
  "spss"                       => "\\s+",
  "STATEMENT"                  => ".*?",
  "string"                     => "(?^s:.(?^:.*))",
  "string1"                    => "(?^s:.(?^:.*))",
  "string2"                    => "(?^s:.(?^:.*))",
  "symbol"                     => ".",
  "text"                       => "(?:\\bq[qwr]?\\b\\s*(?:NOMATH\n        |(?:\\(\\)|\\((?(?<!\\\\)[^\\(\\)]|.)*?(?<!\\\\)\\))\n        |(?:\\{\\}|\\{(?(?<!\\\\)[^\\{\\}]|.)*?(?<!\\\\)\\})\n        |(?:\\[\\]|\\[(?(?<!\\\\)[^\\[\\]]|.)*?(?<!\\\\)\\])\n        |(?:\\<\\>|\\<(?(?<!\\\\)[^\\<\\>]|.)*?(?<!\\\\)\\>)\n        |(?://|/(?(?<!\\\\)[^/]|.)*?(?<!\\\\)/)\n        |(?:\\'\\'|\\'(?(?<!\\\\)[^\\']|.)*?[^\\\\]\\')\n        |(?:\\\"\\\"|\\\"(?(?<!\\\\)[^\\\"]|.)*?[^\\\\]\\\")\n        |(?:\\`\\`|\\`(?(?<!\\\\)[^\\`]|.)*?[^\\\\]\\`)\n        |(?:(?<qchar>[\\W\\w]).*?(?!\\\\(?&qchar))(?&qchar))\n    )|(?:\\'\\'|\\'(?(?<!\\\\)[^\\']|.)*?[^\\\\]\\')|(?:\\\"\\\"|\\\"(?(?<!\\\\)[^\\\"]|.)*?[^\\\\]\\\"))",
  "textqa"                     => "(?:\\`\\`|\\`(?(?<!\\\\)[^\\`]|.)*?[^\\\\]\\`)",
  "textqq"                     => "(?:\\'\\'|\\'(?(?<!\\\\)[^\\']|.)*?[^\\\\]\\')",
  "textqw"                     => "(?:\\\"\\\"|\\\"(?(?<!\\\\)[^\\\"]|.)*?[^\\\\]\\\")",
  "THEN"                       => ".*?",
  "thread"                     => "\\bthread\\b",
  "unblk_pref"                 => "(?:\\}|\\;|\\%\\%\\%)\\s*",
  "using"                      => "\\busing\\b",
  "variable"                   => "\\bvar\\b",
  "vers"                       => "\\bvers\\b",
  "while"                      => "\\bwhile\\b",
  "word"                       => "\\w+",
  "wrap_code"                  => "%%%WRAP_CODE_.*?%%%",
  "wrap_code_header"           => "%%%WRAP_CODEHEADER_.*?%%%",
  "wrap_variable"              => "%%%WRAP_VARIABLE_.*?%%%",
}