// csdfsdf
// using Plack::Util;
// using Plack::Loader;
using CGI::Carp qw/fatalsToBrowser/;
using rise.lib.fs.file;
using rise.lib.web.route;
using rise.lib.web.server;
using rise.lib.web.template;

// using web::route;
namespace rise.lib {

    public class web {

        var file                   = new rise.lib.fs.file;
        var route                  = new rise.lib.web.route;
        var server                 = new rise.lib.web.server;
        var tmpl                   = new rise.lib.web.template;

        // var data;
        var out;
        var qobj                  = {};
        var tout;
        var args;

		public var routeData		= [];
        // var apptrue;
        // export:simple var env                = {};

        export:simple function wsay (data = '') {
            self.out    		~= data;
            return self.out;
        }

        export:simple function out (data = '') {
            self.out    		= data;
            return self.out;
        }

        export:simple function env {
            return self.server.env;
        }

        export:simple function req {
            self.env.{'QUERY_STRING'} =~ s{\%22}{"}gsx;
            self.env.{'QUERY_STRING'} =~ s{\%20}{ }gsx;
            # _env->{QUERY_STRING} =~ s{\:}{=>}gsx;
            return self.env.{'QUERY_STRING'};
        }

        export:simple function template (tname, params) {
            return self.tmpl.compile(tname, params);
        }

        export:simple function tsay (data = '') {
            self.tout 			~= data;
            return self.tout
        }

        export:simple function tout {
            var t				= self.tout;
            self.tout			= '';
            return t;
        }

        export:simple function query {
            var qstring = self.env.{'QUERY_STRING'};
            qstring =~ s{\:}{=>}gsx;
            self.qobj = eval qstring;
            return self.qobj;
        }

        export:simple function start {
            return self.server.start(self.route);
        }

        export:simple function set_header (head) {
            return self.server.set_header(head);
        }

        export:simple function setRoute (rmeth, data) {
            self.route.setRoute(rmeth, data);
        }

        export:simple function get (route, controller) {
            self.setRoute('GET', [route, controller]);
            return [route, controller];
        }

        export:simple function post (route, controller) {
            self.setRoute('POST', [route, controller]);
            return [route, controller];
        }

        export:simple function put (route, controller) {
            self.setRoute('PUT', [route, controller]);
            return [route, controller];
        }

        export:simple function delete (route, controller) {
            self.setRoute('DELETE', [route, controller]);
            return [route, controller];
        }

        export:simple function dmsg (data) {
            require CGI;
            var msg;
            msg ~= CGI::header();
        	msg ~= "<br>################################################<br>";
        	msg ~= data;
        	msg ~= "<br>################################################<br>";
            say msg;
            return msg;
        }

    }
}
