// file access and modify methods

namespace rise.lib.fs {

    using FileHandle;
    using rise.lib.fs.path;
    using rise.lib.fs.info;

    public class file {

        var fh 						= new FileHandle;
        var path                    = new rise.lib.fs.path;
        var info                    = new rise.lib.fs.info;
        var fhelper                 = new rise.lib.fs.fileHelper;

        public var binmod          = 0;

        function cmd_sel (c) {
        	var cmddp = {
                'read'					=> '<',
        	    'write'					=> '>',
        	    'append'				=> '>>'
            };
            return cmddp.{c};
        };

        public function file(cmd, name, data) {
            var res;
            name = self.cmd_sel(cmd) ~ self.path.toAbs(name);
        	data = join('',<data>) if ref data eq 'Fh';
            // say '>>>> ' ~ name;

            // self.fh.open(name) || die "cannot open file $@";
            // if(self.path.filename(name))){
            //
            // }
            __PACKAGE__.__RISE_ERR('ISFILE', self.path.filename(name)) if self.info.isFile(name);

            self.fh.open(name) || __PACKAGE__.__RISE_ERR('ISFILE', self.path.filename(name));
            self.fh.binmod() if self.binmod;

            if (cmd eq 'read'){
                res = join('', [self.fh.getlines()]) || __PACKAGE__.__RISE_ERR('ISFILE', self.path.filename(name));
            }

            res = self.fh.write(data)           if cmd eq 'write';
            res = self.fh.write(data)           if cmd eq 'append';
            self.fh.close;
            return res;
        }

        public function read (name) {
            return self.file('read', name);
        }

        public function write (name, data) {
            return self.file('write', name, data);
        }

        public function append(name, data) {
            return self.file('append', name, data);
        }

        public function copy(name1, name2) {
            return self.fhelper.fcopy(name1, name2);
        }

        public function move(name_old, name_new) {
            return self.fhelper.fmove(name_old, name_new);
        }

        public function delete(name) {
            unlink name;
        }

    }

    public class fileHelper {
        using File.Copy;

        public function fcopy(name1, name2) {
            return File::Copy::copy(name1, name2);
        }

        public function fmove(name_old, name_new) {
            return File::Copy::move(name_old, name_new);
        }
    }
}
