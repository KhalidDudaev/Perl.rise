
namespace rise.lib.fs {

    using rise.lib.fs.pathWorker;

    public class dirWorker {

        public var slash;
        var path                    = new rise.lib.fs.pathWorker;

        function listhelper(path) {
            var dlist       = [];
            var (slash)     = path =~ m{(\\|\/)}sx;

            __PACKAGE__.__RISE_ERR('ISDIR', path) unless self.path.isDir(path);

            slash           = self.slash || slash;

            opendir(DIR, path);
            foreach var item (readdir DIR) {
                push dlist, path ~ item if item !~ m{^(?:\.|\.\.)$};
            }
            closedir DIR;

            return dlist;
        }

        public function list(path, filtrItem = '') {
            var res         = [];
            var dir;
            var deep        = 0;
            var fltrN       = 0;
            var fltrD;
            var fltrDC;
            var fltrF;
            var filter;
            var isD         = 1;
            var isF         = 1;
            var (slash)     = path =~ m{(\\|\/)}sx;

            slash           = self.slash || slash;
            isD             = 0 if filtrItem eq 'file';
            isF             = 0 if filtrItem eq 'dir';
            path            ~= slash if path =~ m{^.*?[^\\\/]$}sx && isD;
            path            = [path] if ref path ne 'ARRAY';

            foreach var dname (path) {
                fltrDC = '';
                (dir, fltrD, fltrF) = self.filterExtract(dname);

                if (fltrD && fltrD =~ s{^([^\\\/]*)[\\\/]}{}sx){
                    fltrDC = $1;
                }

                fltrD = fltrDC ~ slash if fltrDC eq '**';

                // dir         ||= dname;
                // fltrD       ||= '';
                // fltrF       ||= '*.*';

                // say 'dir      -> ' ~ dname;
                // say 'path     -> ' ~ dname;
                // say 'filter D -> ' ~ fltrDC ~ ' | ' ~ fltrD;
                // say 'filter F -> ' ~ fltrF;

                foreach var item (self.listhelper(dir)) {
                    push path, item ~ slash ~ fltrD ~ fltrF if self.path.isDir(item) && self.filter(item, fltrDC);
                    push res, item if self.path.isDir(item) && isD && self.filter(item, fltrDC);
                    push res, item if self.path.isFile(item) && isF && self.filter(item, fltrF) && (fltrDC eq '**' || !fltrDC);
                    // say 'item -> ' ~ item;
                    // say 'path -> ' ~ dump path;
                }
            }

            return res;
        }

        public function listf(path) {
            return self.list(path, 'file');
        }

        public function listd(path) {
            return self.list(path, 'dir');
        }

        function filter(name, fltr) {
            fltr        =~ s{([^\w\*\?])}{\\$1}gsx;
            fltr        =~ s{\*\\\.\*}{*(?:\\.*)?}gsx;
            fltr        =~ s{(?<![()])\?}{\\w}gsx;
            fltr        =~ s{(?<!\\)\*}{\.\*\?}gsx;
            name        =~ s{^(.*?)(\w+(?:\.\w+)*)$}{$2}sx;
            return name =~ m{^(?:$fltr)$}gsx;
        }

        function filterExtract(path) {
             var fltrD;
             var fltrF;
             (path, fltrD, fltrF) = m{^([^\*\?]+[\\\/])([\w\?\*\.\\\/]+[\\\/])*([^\\\/]*)?$}sx;
            //  (path, fltrD, fltrF) = m{^([^\*\?]+[\\\/])(?:([\w\?\*\.]*)[\\\/])?([^\\\/]*)$}sx;
            //  (path, fltrD, fltrF) = m{^(.*?[\\\/])(?:(\*\*|\?+)[\\\/])?([^\\\/]+)?$}sx;
             return (path, fltrD, fltrF);

            //  var filter;
            //  (path, filter) = m{^([^\*\?]+[\\\/])(.*?)$}sx;
            //  return (path, filter);
        }

        // public function filterExpand(path) {
        //     var npath   = [];
        //     var npath2   = [];
        //     var cp;
        //     var fltr;
        //     var dir;
        //
        //     path            = [path] if ref path ne 'ARRAY';
        //
        //     foreach dir (path) {
        //         // (cp, fltr) = dir =~ m{^([^\*\?]+[\\\/])(?:([\w\?\*\.]*)[\\\/])?([^\\\/]*)$}sx;
        //         (cp, fltr) = dir =~ m{^(.*?[\\\/])(\*(?!\*).*?)$}sx;
        //         push npath2, cp;
        //         npath = self.listd(cp) if fltr;
        //         npath2 = clone npath;
        //         map { $_ ~= fltr } npath;
        //         push npath2, filterExpand(npath) if fltr;
        //     }
        //
        //     return npath2;
        // }

        // public function isFile (name) { -e name && !-d _ }
        // public function isDir  (name) { -d name }

    }
}
